# docker-compose from https://developer.confluent.io/quickstart/kafka-docker/

version: '3'
services:

zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000


  broker:
    image: confluentinc/cp-kafka:7.0.1
    container_name: broker
    hostname: broker
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1


  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    depends_on:
      - zookeeper
      - broker
    ports:
      - "8080:8080"
    restart: always
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181


  init-kafka:
    image: confluentinc/cp-kafka:6.1.1
    depends_on:
      - broker
      - zookeeper
      - kafka-ui
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server broker:29092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server broker:29092 --create --if-not-exists --topic instap --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server broker:29092 --list
      "
  producer:
    build:
      context: producer/
      dockerfile: ./Dockerfile
    image: producer_instap
    depends_on:
      - logstash
    container_name: producer
    env_file:
      - ./producer/credentials.env

  consumer:
    build:
      context: consumer/
      dockerfile: ./Dockerfile
    image: consumer_instap
    depends_on:
      - broker
      - zookeeper
      - kafka-ui
    container_name: consumer

  logstash:
    build: 
      context: logstash/
      dockerfile: ./Dockerfile
    image: logstash_instap
    container_name: logstash
    ports:
      - "9600:9600"
      - "9700:9700"
    expose:
      - "9600"
      - "9700"
    depends_on: 
      - broker
      - zookeeper
      - kafka-ui

  elasticsearch:
    build:
        context: ./elasticsearch
        dockerfile: Dockerfile
    image: instap:elasticsearch_INSTAP
    networks:
      tapp:
        ipv4_address: 10.0.100.51

    container_name: elasticsearch_INSTAP
    ports:
        - "9200:9200"
    environment:
        node.name: elasticsearch
        discovery.type: single-node
        ES_JAVA_OPTS: -Xms2g -Xmx2g
        xpack.security.enabled: false
        xpack.security.enrollment.enabled: false
        bootstrap.memory_lock: true

  kibana:
    build:
      context: ./kibana
      dockerfile: Dockerfile
    image: instap:kibana
    container_name: kibana
    hostname: kibana
    ports:
      - 5601:5601
    networks:
      tapp:
        ipv4_address: 10.0.100.52
    environment:
        xpack.security.enabled: false
    depends_on:
      - elasticsearch

volumes:
    myapp:

networks: 
  tapp:
    name: tapp
    driver: bridge
    ipam:
        config:
            - subnet: 10.0.100.1/24
